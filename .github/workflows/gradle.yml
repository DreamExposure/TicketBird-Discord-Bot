name: Java CI

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build for JDK ${{ matrix.java }}
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'DreamExposure/TicketBird-Discord-Bot' }}
    strategy:
      matrix:
        java: [ 17 ]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'

      - name: Validate gradle
        uses: gradle/wrapper-validation-action@v1

      # Build project and have jib push images to private container registry
      - name: Build with Gradle
        run: ./gradlew build
  release:
    name: Publish artifacts
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Publish to CR with Gradle
        env:
          SCW_USER: ${{ secrets.SCW_USER }}
          SCW_SECRET: ${{ secrets.SCW_SECRET }}
        run: ./gradlew clean build jib -Djib.to.auth.username=${SCW_USER} -Djib.to.auth.password=${SCW_SECRET}

      # Have K8S pull latest images for dev pods
      - name: Trigger dev deploy
        uses: Consensys/kubernetes-action@master
        if: github.ref_name == 'develop'
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: delete -n ticketbird pods -l profile=dev,app=ticketbird
